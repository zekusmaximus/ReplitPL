Create An Interactive Speculative Fiction Experience Welcome to [Project-Leibniz]! This project when completed should be an immersive web-based interactive speculative fiction experience where the story unfolds and adapts based on user choices and exploration. Navigate a dynamic map of interconnected narrative nodes, each revealing a new part of an evolving story that responds to the order of user discoveries and the paths users revisit. Description [Project-Leibniz] should aim to create a unique storytelling platform. The core experience should revolve around a graphical homepage featuring nodes that represent story fragments or decision points. As users click on these nodes, they delve into text-based story pages. User journey influences the connections between nodes, their appearance, and ultimately, the narrative climax. Key Features To Include: Interactive graphical node map for navigation. Dynamically evolving story based on user choices, visit order, and visit counts. Visual feedback on the node map: nodes change color/size, lines connect/change based on progression. A unique narrative endpoint triggered by specific user interactions and node states. Inset mini-map for larger story graphs. Proposed Tech Stack (change or improve as necessary): modern full-stack JavaScript/TypeScript approach: Frontend (Client): React: For building the user interface. TypeScript: For type safety and improved developer experience. Vite: As the frontend build tool and development server. D3.js: For creating and managing the dynamic, interactive node-based visualizations. CSS/HTML: Standard web technologies for structure and styling. Backend (Server): Node.js: As the JavaScript runtime environment. Express.js: As the web application framework for building APIs. MongoDB: As the NoSQL database to store story content, node states, and user progression. Mongoose: As the ODM (Object Document Mapper) for interacting with MongoDB. Project Structure The project is organized into two main directories: /client: Contains the React frontend application. /server: Contains the Node.js backend API. Each directory has its own package.json and manages its own dependencies.